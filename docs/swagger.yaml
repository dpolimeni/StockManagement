basePath: /
definitions:
  handlers.UserLogin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  schemas.Product:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      raw_materials:
        items:
          $ref: '#/definitions/schemas.RawMaterial'
        type: array
    required:
    - id
    - name
    - price
    - raw_materials
    type: object
  schemas.RawMaterial:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      quantity:
        type: number
    type: object
  schemas.Restaurant:
    properties:
      address:
        type: string
      id:
        type: string
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/schemas.Product'
        type: array
      stock:
        $ref: '#/definitions/schemas.Stock'
    type: object
  schemas.Stock:
    properties:
      rawMaterials:
        items:
          $ref: '#/definitions/schemas.RawMaterial'
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server stock management server
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Of my apis
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - '*/*'
      description: Get test on base path.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - Root Base
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login to the application
      parameters:
      - description: UserLogin
        in: body
        name: userLogin
        required: true
        schema:
          $ref: '#/definitions/handlers.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Login to the application
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh the token
      parameters:
      - default: Bearer
        description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Refresh the token
      tags:
      - auth
  /api/v1/restaurant:
    delete:
      consumes:
      - application/json
      description: Delete a restaurant from the database
      parameters:
      - description: Restaurant ID
        in: query
        name: restaurant
        required: true
        type: string
      - default: Bearer
        description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Delete a restaurant
      tags:
      - Restaurant
    post:
      consumes:
      - application/json
      description: Add a new restaurant to the database
      parameters:
      - description: Restaurant object that needs to be added
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/schemas.Restaurant'
      - default: Bearer
        description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Restaurant'
      summary: Add a new restaurant
      tags:
      - Restaurant
  /api/v1/restaurant/materials/create:
    post:
      consumes:
      - application/json
      description: Add new raw materials to the database
      parameters:
      - description: Raw materials to add
        in: body
        name: raw_materials
        required: true
        schema:
          items:
            $ref: '#/definitions/schemas.RawMaterial'
          type: array
      - description: Restaurant ID
        in: query
        name: restaurant
        required: true
        type: string
      - default: Bearer
        description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Restaurant'
      summary: Create a new raw materials
      tags:
      - Restaurant
  /api/v1/stock:
    get:
      consumes:
      - application/json
      description: Get the stock levels of a restaurant
      parameters:
      - description: Restaurant ID
        in: query
        name: restaurant
        required: true
        type: string
      - default: Bearer
        description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get the stock levels
      tags:
      - Stock
  /api/v1/stock/sell:
    post:
      consumes:
      - application/json
      description: Sell products from the stock
      parameters:
      - description: Restaurant ID
        in: query
        name: restaurant
        required: true
        type: string
      - description: Products to sell
        in: body
        name: Products
        required: true
        schema:
          items:
            $ref: '#/definitions/schemas.Product'
          type: array
      produces:
      - application/json
      responses: {}
      summary: Sell products
      tags:
      - Stock
swagger: "2.0"
